{"ast":null,"code":"var _jsxFileName = \"/home/inbe1e-dl3947cs/Desktop/Cyient/Healthcare TARA.v03/CySecAssureTARA/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState } from 'react';\nimport DropdownMenu from './components/DropdownMenu';\nimport AssetForm from './components/AssetForm';\nimport AssetListPanel from './components/AssetListPanel';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [savedAssets, setSavedAssets] = useState([]);\n  const [selectedAssets, setSelectedAssets] = useState([]); // To store selected assets\n  const [fetchedControls, setFetchedControls] = useState([]); // Controls fetched for currently selected asset\n  const [selectedControls, setSelectedControls] = useState([]); // Controls user has selected to apply to assets\n\n  // Append selected asset to array if it’s not already selected\n  const handleSelectAsset = assetName => {\n    setSelectedAssets(prev => {\n      if (Array.isArray(prev)) {\n        return prev.includes(assetName) ? prev : [...prev, assetName];\n      } else {\n        // Initialize as array if prev is not an array\n        return [assetName];\n      }\n    });\n  };\n\n  // Update controls for the selected asset\n  const handleControlsFetched = controls => {\n    setFetchedControls(controls);\n    setSelectedControls([]); // Reset controls for a new selection\n  };\n\n  // Toggle control selection\n  const handleControlSelection = control => {\n    setSelectedControls(prev => prev.includes(control) ? prev.filter(c => c !== control) : [...prev, control]);\n  };\n\n  // Save selected assets with common fields\n  const handleSaveAsset = assetData => {\n    if (Array.isArray(selectedAssets) && selectedAssets.length > 0) {\n      const assetsToSave = selectedAssets.map(asset => ({\n        assetName: asset,\n        actionOwner: assetData.actionOwner,\n        riskIdentificationDate: assetData.riskIdentificationDate,\n        // Maps to Y column\n        mitigationTimeline: \"10-15 Days from Risk Identification Date\",\n        // Static data for W column\n        existingControls: selectedControls\n      }));\n      setSavedAssets(prevAssets => [...prevAssets, ...assetsToSave]);\n      setSelectedAssets([]); // Clear selected assets after saving\n      setSelectedControls([]); // Clear selected controls\n      console.log(\"Assets saved:\", assetsToSave);\n    } else {\n      console.warn(\"Please select at least one asset.\");\n    }\n  };\n  const handleGenerateReport = async () => {\n    console.log(\"Generate Report button clicked\");\n    try {\n      const response = await fetch('http://localhost:5000/api/reports/generate-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          assetList: savedAssets\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log(\"Report generated successfully:\", result.reportUrl);\n        window.open(result.reportUrl, '_blank');\n      } else {\n        const result = await response.json();\n        console.error('Failed to generate report:', result.message);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL + '/CySecAssureBG.jpeg'})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundAttachment: 'fixed',\n      width: '100vw',\n      height: '100vh',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(DropdownMenu, {\n          selectedAssets: selectedAssets,\n          onSelectAsset: handleSelectAsset // Updated to ensure selectedAssets is an array\n          ,\n          onControlsFetched: handleControlsFetched\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AssetForm, {\n          onSave: handleSaveAsset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Available Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), fetchedControls.length > 0 ? fetchedControls.map(control => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedControls.includes(control),\n            onChange: () => handleControlSelection(control)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: control\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 33\n          }, this)]\n        }, control, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select an asset to see controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(AssetListPanel, {\n          savedAssets: savedAssets,\n          onUpdateAssetControls: (assetName, controls) => {\n            setSavedAssets(prev => prev.map(a => a.assetName === assetName ? {\n              ...a,\n              existingControls: controls\n            } : a));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"generate-report-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleGenerateReport,\n            className: \"generate-report-button\",\n            children: \"Generate Report\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"H8t257Ypxusx7+x+g3Xx7zUknkA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DropdownMenu","AssetForm","AssetListPanel","jsxDEV","_jsxDEV","App","_s","savedAssets","setSavedAssets","selectedAssets","setSelectedAssets","fetchedControls","setFetchedControls","selectedControls","setSelectedControls","handleSelectAsset","assetName","prev","Array","isArray","includes","handleControlsFetched","controls","handleControlSelection","control","filter","c","handleSaveAsset","assetData","length","assetsToSave","map","asset","actionOwner","riskIdentificationDate","mitigationTimeline","existingControls","prevAssets","console","log","warn","handleGenerateReport","response","fetch","method","headers","body","JSON","stringify","assetList","ok","result","json","reportUrl","window","open","error","message","className","style","backgroundImage","process","env","PUBLIC_URL","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","width","height","display","justifyContent","alignItems","overflow","children","onSelectAsset","onControlsFetched","fileName","_jsxFileName","lineNumber","columnNumber","onSave","type","checked","onChange","onUpdateAssetControls","a","onClick","_c","$RefreshReg$"],"sources":["/home/inbe1e-dl3947cs/Desktop/Cyient/Healthcare TARA.v03/CySecAssureTARA/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\nimport React, { useState } from 'react';\nimport DropdownMenu from './components/DropdownMenu';\nimport AssetForm from './components/AssetForm';\nimport AssetListPanel from './components/AssetListPanel';\nimport './styles/App.css';\n\nconst App = () => {\n    const [savedAssets, setSavedAssets] = useState([]);\n    const [selectedAssets, setSelectedAssets] = useState([]); // To store selected assets\n    const [fetchedControls, setFetchedControls] = useState([]); // Controls fetched for currently selected asset\n    const [selectedControls, setSelectedControls] = useState([]); // Controls user has selected to apply to assets\n\n    // Append selected asset to array if it’s not already selected\n    const handleSelectAsset = (assetName) => {\n        setSelectedAssets(prev => {\n            if (Array.isArray(prev)) {\n                return prev.includes(assetName) ? prev : [...prev, assetName];\n            } else {\n                // Initialize as array if prev is not an array\n                return [assetName];\n            }\n        });\n    };\n\n    // Update controls for the selected asset\n    const handleControlsFetched = (controls) => {\n        setFetchedControls(controls);\n        setSelectedControls([]); // Reset controls for a new selection\n    };\n\n    // Toggle control selection\n    const handleControlSelection = (control) => {\n        setSelectedControls(prev =>\n            prev.includes(control)\n                ? prev.filter(c => c !== control)\n                : [...prev, control]\n        );\n    };\n\n    // Save selected assets with common fields\n    const handleSaveAsset = (assetData) => {\n        if (Array.isArray(selectedAssets) && selectedAssets.length > 0) {\n            const assetsToSave = selectedAssets.map(asset => ({\n                assetName: asset,\n                actionOwner: assetData.actionOwner,\n                riskIdentificationDate: assetData.riskIdentificationDate, // Maps to Y column\n                mitigationTimeline: \"10-15 Days from Risk Identification Date\", // Static data for W column\n                existingControls: selectedControls,\n            }));\n\n            setSavedAssets(prevAssets => [...prevAssets, ...assetsToSave]);\n            setSelectedAssets([]); // Clear selected assets after saving\n            setSelectedControls([]); // Clear selected controls\n            console.log(\"Assets saved:\", assetsToSave);\n        } else {\n            console.warn(\"Please select at least one asset.\");\n        }\n    };\n\n    const handleGenerateReport = async () => {\n        console.log(\"Generate Report button clicked\");\n\n        try {\n            const response = await fetch('http://localhost:5000/api/reports/generate-report', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ assetList: savedAssets })\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                console.log(\"Report generated successfully:\", result.reportUrl);\n                window.open(result.reportUrl, '_blank');\n            } else {\n                const result = await response.json();\n                console.error('Failed to generate report:', result.message);\n            }\n        } catch (error) {\n            console.error('Error generating report:', error);\n        }\n    };\n\n    return (\n        <div\n            className=\"background\"\n            style={{\n                backgroundImage: `url(${process.env.PUBLIC_URL + '/CySecAssureBG.jpeg'})`,\n                backgroundSize: 'cover',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                backgroundAttachment: 'fixed',\n                width: '100vw',\n                height: '100vh',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                overflow: 'hidden',\n            }}\n        >\n            <div className=\"overlay\">\n                <div className=\"left-panel\">\n                    <DropdownMenu\n                        selectedAssets={selectedAssets}\n                        onSelectAsset={handleSelectAsset} // Updated to ensure selectedAssets is an array\n                        onControlsFetched={handleControlsFetched}\n                    />\n                    <AssetForm onSave={handleSaveAsset} />\n                </div>\n                <div className=\"right-panel\">\n                    <h3>Available Controls</h3>\n                    {fetchedControls.length > 0 ? (\n                        fetchedControls.map(control => (\n                            <div key={control} className=\"control-option\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={selectedControls.includes(control)}\n                                    onChange={() => handleControlSelection(control)}\n                                />\n                                <label>{control}</label>\n                            </div>\n                        ))\n                    ) : (\n                        <p>Select an asset to see controls</p>\n                    )}\n                    <AssetListPanel\n                        savedAssets={savedAssets}\n                        onUpdateAssetControls={(assetName, controls) => {\n                            setSavedAssets(prev =>\n                                prev.map(a =>\n                                    a.assetName === assetName\n                                        ? { ...a, existingControls: controls }\n                                        : a\n                                )\n                            );\n                        }}\n                    />\n                    <div className=\"generate-report-container\">\n                        <button onClick={handleGenerateReport} className=\"generate-report-button\">\n                            Generate Report\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}