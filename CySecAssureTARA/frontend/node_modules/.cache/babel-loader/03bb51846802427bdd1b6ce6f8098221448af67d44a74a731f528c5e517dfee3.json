{"ast":null,"code":"var _jsxFileName = \"/home/inbe1e-dl3947cs/Desktop/Cyient/Healthcare TARA.v04/CySecAssureTARA/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n\nimport React, { useState } from 'react';\nimport DropdownMenu from './components/DropdownMenu';\nimport AssetForm from './components/AssetForm';\nimport AssetListPanel from './components/AssetListPanel';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [savedAssets, setSavedAssets] = useState([]);\n  const [selectedAssets, setSelectedAssets] = useState([]);\n  const [fetchedControls, setFetchedControls] = useState([]);\n  const [controlsPerAsset, setControlsPerAsset] = useState({});\n\n  // Handle asset selection\n  const handleSelectAsset = assetName => {\n    setSelectedAssets(prev => {\n      if (!prev.includes(assetName)) {\n        return [...prev, assetName];\n      }\n      return prev;\n    });\n  };\n\n  // Fetch and update available controls for the selected asset\n  const handleControlsFetched = controls => {\n    setFetchedControls(controls);\n    setControlsPerAsset(prev => {\n      const lastSelectedAsset = selectedAssets[selectedAssets.length - 1];\n      if (lastSelectedAsset && !(lastSelectedAsset in prev)) {\n        return {\n          ...prev,\n          [lastSelectedAsset]: {\n            existingControls: [],\n            additionalControls: controls\n          }\n        };\n      }\n      return prev;\n    });\n  };\n\n  // Toggle control selection for each asset independently\n  const handleControlSelection = (assetName, control) => {\n    setControlsPerAsset(prev => {\n      const {\n        existingControls,\n        additionalControls\n      } = prev[assetName] || {\n        existingControls: [],\n        additionalControls: fetchedControls\n      };\n\n      // Update existingControls and additionalControls arrays\n      let updatedExistingControls, updatedAdditionalControls;\n      if (existingControls.includes(control)) {\n        updatedExistingControls = existingControls.filter(c => c !== control);\n        updatedAdditionalControls = [...additionalControls, control];\n      } else {\n        updatedExistingControls = [...existingControls, control];\n        updatedAdditionalControls = additionalControls.filter(c => c !== control);\n      }\n      return {\n        ...prev,\n        [assetName]: {\n          existingControls: updatedExistingControls,\n          additionalControls: updatedAdditionalControls\n        }\n      };\n    });\n  };\n\n  // Save asset data\n  const handleSaveAsset = assetData => {\n    if (selectedAssets.length > 0) {\n      const assetsToSave = selectedAssets.map(asset => {\n        const {\n          existingControls,\n          additionalControls\n        } = controlsPerAsset[asset] || {};\n        return {\n          assetName: asset,\n          actionOwner: assetData.actionOwner,\n          riskIdentificationDate: assetData.riskIdentificationDate,\n          mitigationTimeline: \"10-15 Days from Risk Identification Date\",\n          existingControls,\n          additionalControls\n        };\n      });\n\n      // Update saved assets and clear selected states\n      setSavedAssets(prevAssets => [...prevAssets, ...assetsToSave]);\n      setSelectedAssets([]);\n      setControlsPerAsset({});\n      console.log(\"Assets saved:\", assetsToSave);\n    } else {\n      console.warn(\"Please select at least one asset.\");\n    }\n  };\n  const handleGenerateReport = async () => {\n    console.log(\"Generate Report button clicked\");\n    try {\n      const response = await fetch('http://localhost:5000/api/reports/generate-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          assetList: savedAssets\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log(\"Report generated successfully:\", result.reportUrl);\n        window.open(result.reportUrl, '_blank');\n      } else {\n        const result = await response.json();\n        console.error('Failed to generate report:', result.message);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL + '/CySecAssureBG.jpeg'})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundAttachment: 'fixed',\n      width: '100vw',\n      height: '100vh',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(DropdownMenu, {\n          selectedAssets: selectedAssets,\n          onSelectAsset: handleSelectAsset,\n          onControlsFetched: handleControlsFetched\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AssetForm, {\n          onSave: handleSaveAsset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Available Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), fetchedControls.length > 0 ? fetchedControls.map(control => {\n          var _controlsPerAsset$sel;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"control-option\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: (((_controlsPerAsset$sel = controlsPerAsset[selectedAssets[selectedAssets.length - 1]]) === null || _controlsPerAsset$sel === void 0 ? void 0 : _controlsPerAsset$sel.existingControls) || []).includes(control),\n              onChange: () => handleControlSelection(selectedAssets[selectedAssets.length - 1], control)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: control\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this)]\n          }, control, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select an asset to see controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(AssetListPanel, {\n          savedAssets: savedAssets,\n          onUpdateAssetControls: (assetName, controls) => {\n            setSavedAssets(prev => prev.map(a => a.assetName === assetName ? {\n              ...a,\n              existingControls: controls\n            } : a));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"generate-report-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleGenerateReport,\n            className: \"generate-report-button\",\n            children: \"Generate Report\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"NMqdV4cM+JW9a7syU0FYyfSl2T8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DropdownMenu","AssetForm","AssetListPanel","jsxDEV","_jsxDEV","App","_s","savedAssets","setSavedAssets","selectedAssets","setSelectedAssets","fetchedControls","setFetchedControls","controlsPerAsset","setControlsPerAsset","handleSelectAsset","assetName","prev","includes","handleControlsFetched","controls","lastSelectedAsset","length","existingControls","additionalControls","handleControlSelection","control","updatedExistingControls","updatedAdditionalControls","filter","c","handleSaveAsset","assetData","assetsToSave","map","asset","actionOwner","riskIdentificationDate","mitigationTimeline","prevAssets","console","log","warn","handleGenerateReport","response","fetch","method","headers","body","JSON","stringify","assetList","ok","result","json","reportUrl","window","open","error","message","className","style","backgroundImage","process","env","PUBLIC_URL","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","width","height","display","justifyContent","alignItems","overflow","children","onSelectAsset","onControlsFetched","fileName","_jsxFileName","lineNumber","columnNumber","onSave","_controlsPerAsset$sel","type","checked","onChange","onUpdateAssetControls","a","onClick","_c","$RefreshReg$"],"sources":["/home/inbe1e-dl3947cs/Desktop/Cyient/Healthcare TARA.v04/CySecAssureTARA/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\n\nimport React, { useState } from 'react';\nimport DropdownMenu from './components/DropdownMenu';\nimport AssetForm from './components/AssetForm';\nimport AssetListPanel from './components/AssetListPanel';\nimport './styles/App.css';\n\nconst App = () => {\n    const [savedAssets, setSavedAssets] = useState([]);\n    const [selectedAssets, setSelectedAssets] = useState([]);\n    const [fetchedControls, setFetchedControls] = useState([]);\n    const [controlsPerAsset, setControlsPerAsset] = useState({});\n\n    // Handle asset selection\n    const handleSelectAsset = (assetName) => {\n        setSelectedAssets(prev => {\n            if (!prev.includes(assetName)) {\n                return [...prev, assetName];\n            }\n            return prev;\n        });\n    };\n\n    // Fetch and update available controls for the selected asset\n    const handleControlsFetched = (controls) => {\n        setFetchedControls(controls);\n        setControlsPerAsset(prev => {\n            const lastSelectedAsset = selectedAssets[selectedAssets.length - 1];\n            if (lastSelectedAsset && !(lastSelectedAsset in prev)) {\n                return { ...prev, [lastSelectedAsset]: { existingControls: [], additionalControls: controls } };\n            }\n            return prev;\n        });\n    };\n\n    // Toggle control selection for each asset independently\n    const handleControlSelection = (assetName, control) => {\n        setControlsPerAsset(prev => {\n            const { existingControls, additionalControls } = prev[assetName] || { existingControls: [], additionalControls: fetchedControls };\n\n            // Update existingControls and additionalControls arrays\n            let updatedExistingControls, updatedAdditionalControls;\n            if (existingControls.includes(control)) {\n                updatedExistingControls = existingControls.filter(c => c !== control);\n                updatedAdditionalControls = [...additionalControls, control];\n            } else {\n                updatedExistingControls = [...existingControls, control];\n                updatedAdditionalControls = additionalControls.filter(c => c !== control);\n            }\n\n            return {\n                ...prev,\n                [assetName]: {\n                    existingControls: updatedExistingControls,\n                    additionalControls: updatedAdditionalControls\n                }\n            };\n        });\n    };\n\n    // Save asset data\n    const handleSaveAsset = (assetData) => {\n        if (selectedAssets.length > 0) {\n            const assetsToSave = selectedAssets.map(asset => {\n                const { existingControls, additionalControls } = controlsPerAsset[asset] || {};\n\n                return {\n                    assetName: asset,\n                    actionOwner: assetData.actionOwner,\n                    riskIdentificationDate: assetData.riskIdentificationDate,\n                    mitigationTimeline: \"10-15 Days from Risk Identification Date\",\n                    existingControls,\n                    additionalControls\n                };\n            });\n\n            // Update saved assets and clear selected states\n            setSavedAssets(prevAssets => [...prevAssets, ...assetsToSave]);\n            setSelectedAssets([]);\n            setControlsPerAsset({});\n            console.log(\"Assets saved:\", assetsToSave);\n        } else {\n            console.warn(\"Please select at least one asset.\");\n        }\n    };\n\n    const handleGenerateReport = async () => {\n        console.log(\"Generate Report button clicked\");\n\n        try {\n            const response = await fetch('http://localhost:5000/api/reports/generate-report', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ assetList: savedAssets })\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                console.log(\"Report generated successfully:\", result.reportUrl);\n                window.open(result.reportUrl, '_blank');\n            } else {\n                const result = await response.json();\n                console.error('Failed to generate report:', result.message);\n            }\n        } catch (error) {\n            console.error('Error generating report:', error);\n        }\n    };\n\n    return (\n        <div\n            className=\"background\"\n            style={{\n                backgroundImage: `url(${process.env.PUBLIC_URL + '/CySecAssureBG.jpeg'})`,\n                backgroundSize: 'cover',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                backgroundAttachment: 'fixed',\n                width: '100vw',\n                height: '100vh',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                overflow: 'hidden',\n            }}\n        >\n            <div className=\"overlay\">\n                <div className=\"left-panel\">\n                    <DropdownMenu\n                        selectedAssets={selectedAssets}\n                        onSelectAsset={handleSelectAsset}\n                        onControlsFetched={handleControlsFetched}\n                    />\n                    <AssetForm onSave={handleSaveAsset} />\n                </div>\n                <div className=\"right-panel\">\n                    <h3>Available Controls</h3>\n                    {fetchedControls.length > 0 ? (\n                        fetchedControls.map(control => (\n                            <div key={control} className=\"control-option\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={(controlsPerAsset[selectedAssets[selectedAssets.length - 1]]?.existingControls || []).includes(control)}\n                                    onChange={() => handleControlSelection(selectedAssets[selectedAssets.length - 1], control)}\n                                />\n                                <label>{control}</label>\n                            </div>\n                        ))\n                    ) : (\n                        <p>Select an asset to see controls</p>\n                    )}\n                    <AssetListPanel\n                        savedAssets={savedAssets}\n                        onUpdateAssetControls={(assetName, controls) => {\n                            setSavedAssets(prev =>\n                                prev.map(a =>\n                                    a.assetName === assetName\n                                        ? { ...a, existingControls: controls }\n                                        : a\n                                )\n                            );\n                        }}\n                    />\n                    <div className=\"generate-report-container\">\n                        <button onClick={handleGenerateReport} className=\"generate-report-button\">\n                            Generate Report\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}