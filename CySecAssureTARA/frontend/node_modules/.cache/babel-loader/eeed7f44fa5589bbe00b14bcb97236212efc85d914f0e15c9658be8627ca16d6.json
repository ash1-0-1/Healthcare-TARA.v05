{"ast":null,"code":"var _jsxFileName = \"/home/inbe1e-dl3947cs/Desktop/Cyient/Healthcare TARA.v03/CySecAssureTARA/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState } from 'react';\nimport DropdownMenu from './components/DropdownMenu';\nimport AssetForm from './components/AssetForm';\nimport AssetListPanel from './components/AssetListPanel';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [savedAssets, setSavedAssets] = useState([]);\n  const [selectedAssets, setSelectedAssets] = useState([]); // For multi-select functionality\n\n  // Handle saving selected assets with common Action Owner and Risk Identification Date\n  const handleSaveAsset = assetData => {\n    if (selectedAssets.length > 0) {\n      const assetsToSave = selectedAssets.map(asset => ({\n        assetName: asset,\n        actionOwner: assetData.actionOwner,\n        riskIdentificationDate: assetData.riskIdentificationDate,\n        existingControls: assetData.existingControls || [],\n        availableControls: assetData.availableControls || [] // Store controls fetched from the database\n      }));\n      setSavedAssets(prevAssets => [...prevAssets, ...assetsToSave]);\n      setSelectedAssets([]); // Reset selected assets\n      console.log(\"Assets saved:\", assetsToSave);\n    } else {\n      console.warn(\"Please select at least one asset.\");\n    }\n  };\n\n  // Update the controls for each asset when selected from the dropdown\n  const handleControlsFetched = (assetName, controls) => {\n    setSavedAssets(prevAssets => prevAssets.map(a => a.assetName === assetName ? {\n      ...a,\n      availableControls: controls\n    } : a));\n  };\n\n  // Function to generate report\n  const handleGenerateReport = async () => {\n    console.log(\"Generate Report button clicked\");\n    try {\n      const response = await fetch('http://localhost:5000/api/reports/generate-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          assetList: savedAssets\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log(\"Report generated successfully:\", result.reportUrl);\n        window.open(result.reportUrl, '_blank');\n      } else {\n        const result = await response.json();\n        console.error('Failed to generate report:', result.message);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL + '/CySecAssureBG.jpeg'})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundAttachment: 'fixed',\n      width: '100vw',\n      height: '100vh',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(DropdownMenu, {\n          selectedAssets: selectedAssets,\n          onSelectAsset: setSelectedAssets,\n          onControlsFetched: handleControlsFetched // Pass handleControlsFetched as a prop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AssetForm, {\n          onSave: handleSaveAsset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: [/*#__PURE__*/_jsxDEV(AssetListPanel, {\n          savedAssets: savedAssets,\n          onUpdateAssetControls: (assetName, controls) => {\n            setSavedAssets(prev => prev.map(a => a.assetName === assetName ? {\n              ...a,\n              existingControls: controls\n            } : a));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"generate-report-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleGenerateReport,\n            className: \"generate-report-button\",\n            children: \"Generate Report\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"p/yGbFWsuF3XQAcGQTIn8E1ArlI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DropdownMenu","AssetForm","AssetListPanel","jsxDEV","_jsxDEV","App","_s","savedAssets","setSavedAssets","selectedAssets","setSelectedAssets","handleSaveAsset","assetData","length","assetsToSave","map","asset","assetName","actionOwner","riskIdentificationDate","existingControls","availableControls","prevAssets","console","log","warn","handleControlsFetched","controls","a","handleGenerateReport","response","fetch","method","headers","body","JSON","stringify","assetList","ok","result","json","reportUrl","window","open","error","message","className","style","backgroundImage","process","env","PUBLIC_URL","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","width","height","display","justifyContent","alignItems","overflow","children","onSelectAsset","onControlsFetched","fileName","_jsxFileName","lineNumber","columnNumber","onSave","onUpdateAssetControls","prev","onClick","_c","$RefreshReg$"],"sources":["/home/inbe1e-dl3947cs/Desktop/Cyient/Healthcare TARA.v03/CySecAssureTARA/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\nimport React, { useState } from 'react';\nimport DropdownMenu from './components/DropdownMenu';\nimport AssetForm from './components/AssetForm';\nimport AssetListPanel from './components/AssetListPanel';\nimport './styles/App.css';\n\nconst App = () => {\n    const [savedAssets, setSavedAssets] = useState([]);\n    const [selectedAssets, setSelectedAssets] = useState([]); // For multi-select functionality\n\n    // Handle saving selected assets with common Action Owner and Risk Identification Date\n    const handleSaveAsset = (assetData) => {\n        if (selectedAssets.length > 0) {\n            const assetsToSave = selectedAssets.map(asset => ({\n                assetName: asset,\n                actionOwner: assetData.actionOwner,\n                riskIdentificationDate: assetData.riskIdentificationDate,\n                existingControls: assetData.existingControls || [],\n                availableControls: assetData.availableControls || [] // Store controls fetched from the database\n            }));\n\n            setSavedAssets(prevAssets => [...prevAssets, ...assetsToSave]);\n            setSelectedAssets([]); // Reset selected assets\n            console.log(\"Assets saved:\", assetsToSave);\n        } else {\n            console.warn(\"Please select at least one asset.\");\n        }\n    };\n\n    // Update the controls for each asset when selected from the dropdown\n    const handleControlsFetched = (assetName, controls) => {\n        setSavedAssets(prevAssets =>\n            prevAssets.map(a => \n                a.assetName === assetName\n                    ? { ...a, availableControls: controls }\n                    : a\n            )\n        );\n    };\n\n    // Function to generate report\n    const handleGenerateReport = async () => {\n        console.log(\"Generate Report button clicked\");\n\n        try {\n            const response = await fetch('http://localhost:5000/api/reports/generate-report', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ assetList: savedAssets })\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                console.log(\"Report generated successfully:\", result.reportUrl);\n                window.open(result.reportUrl, '_blank');\n            } else {\n                const result = await response.json();\n                console.error('Failed to generate report:', result.message);\n            }\n        } catch (error) {\n            console.error('Error generating report:', error);\n        }\n    };\n\n    return (\n        <div\n            className=\"background\"\n            style={{\n                backgroundImage: `url(${process.env.PUBLIC_URL + '/CySecAssureBG.jpeg'})`,\n                backgroundSize: 'cover',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                backgroundAttachment: 'fixed',\n                width: '100vw',\n                height: '100vh',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                overflow: 'hidden',\n            }}\n        >\n            <div className=\"overlay\">\n                <div className=\"left-panel\">\n                    <DropdownMenu\n                        selectedAssets={selectedAssets}\n                        onSelectAsset={setSelectedAssets}\n                        onControlsFetched={handleControlsFetched} // Pass handleControlsFetched as a prop\n                    />\n                    <AssetForm onSave={handleSaveAsset} />\n                </div>\n                <div className=\"right-panel\">\n                    <AssetListPanel\n                        savedAssets={savedAssets}\n                        onUpdateAssetControls={(assetName, controls) => {\n                            setSavedAssets(prev => prev.map(a =>\n                                a.assetName === assetName\n                                    ? { ...a, existingControls: controls }\n                                    : a\n                            ));\n                        }}\n                    />\n                    <div className=\"generate-report-container\">\n                        <button onClick={handleGenerateReport} className=\"generate-report-button\">\n                            Generate Report\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}